# Highly inspired by github.com/onk/onkcop

# 自動生成されるものはチェック対象から除外する
AllCops:
  Exclude:
    - "vendor/**/*" # rubocop config/default.yml
    - "db/schema.rb"
    - "node_modules/**/*"
    - "config.ru"
    - "config/puma.rb"
    - "config/unicorn.rb"
    - "Capfile"
    - "**/*.spec"  # .spec file should be an RPM spec file not an RSpec file
  DisplayCopNames: true
  NewCops: enable

#################### Layout ################################

# メソッドチェーンの改行は末尾に . を入れる
# REPL に貼り付けた際の暴発を防ぐため
Layout/DotPosition:
  EnforcedStyle: trailing

# 桁揃えが綺麗にならないことが多いので migration は除外
Layout/ExtraSpacing:
  Exclude:
    - "db/migrate/*.rb"

# RuntimeError は「特定の Error を定義できない場合」なので、
# 定義できるエラーは RuntimeError ではなく StandardError を継承する。
Lint/InheritException:
  EnforcedStyle: standard_error

# メソッドチェーン感がより感じられるインデントにする
Layout/MultilineMethodCallIndentation:
  EnforcedStyle: indented_relative_to_receiver

# Rails の生成するファイルに存在するので除外
Layout/SpaceInsideArrayLiteralBrackets:
  Exclude:
    - "config/environments/*"

# Rails の生成するファイルに存在するので除外
Layout/SpaceInsidePercentLiteralDelimiters:
  Exclude:
    - "config/initializers/*"

#################### Lint ##################################

# Style/EmptyCaseCondition と同じく網羅の表現力が empty when を認めた方が高いし、
# 頻出する対象を最初の when で撥ねるのはパフォーマンス向上で頻出する。
# また、
#   case foo
#   when 42
#     # nop
#   when 1..100
#     ...
#   end
# と、下の when がキャッチしてしまう場合等に対応していない。
# See. http://tech.sideci.com/entry/2016/11/01/105900
Lint/EmptyWhen:
  Enabled: false

#################### Metrics ###############################

# 30 まではギリギリ許せる範囲だったけど
# リリースごとに 3 ずつぐらい下げていきます。20 まで下げたい。
Metrics/AbcSize:
  Max: 24

# Gemfile, Guardfile は DSL 的で基本的に複雑にはならないので除外
# rake, rspec, environments, routes は巨大な block 不可避なので除外
# TODO: ExcludedMethods の精査
Metrics/BlockLength:
  Exclude:
    - "Rakefile"
    - "**/*.rake"
    - "spec/**/*.rb"
    - "Gemfile"
    - "Guardfile"
    - "config/environments/*.rb"
    - "config/routes.rb"
    - "config/routes/**/*.rb"
    - "*.gemspec"

# 6 は強すぎるので緩める
Metrics/CyclomaticComplexity:
  Max: 10

# * 警告 120文字
# * 禁止 160文字
# のイメージ
Layout/LineLength:
  Max: 160

# 20 行超えるのは migration ファイル以外滅多に無い
Metrics/MethodLength:
  Max: 20
  Exclude:
    - "db/migrate/*.rb"

# 分岐の数。ガード句を多用しているとデフォルト 7 だと厳しい
Metrics/PerceivedComplexity:
  Max: 8

#################### Naming ################################

# 3 文字未満だと指摘されるが、未使用を示す _ や e(rror), b(lock),
# n(umber) といった 1 文字変数は頻出するし、前置詞(by, to, ...)や
# よく知られた省略語 (op: operator とか pk: primary key とか) も妥当。
# 変数 s にどんな文字列かを形容したい場合と、不要な場合とがある＝無効
Naming/MethodParameterName:
  Enabled: false

#################### Style #################################

# redirect_to xxx and return のイディオムを維持したい
Style/AndOr:
  EnforcedStyle: conditionals

# 日本語のコメントを許可する
Style/AsciiComments:
  Enabled: false

# RSpec の生成するファイルに存在するので除外
Style/BlockComments:
  Exclude:
    - "spec/spec_helper.rb"

# do .. end から更にメソッドチェーンすると見づらいので
# auto-correct せず、自分で修正する
# spec 内は見た目が綺麗になるので許可
Style/BlockDelimiters:
  AutoCorrect: false
  Exclude:
    - "spec/**/*"

# scope が違うとか親 module の存在確認が必要とかデメリットはあるが、
# namespace 付きのクラスはかなり頻繁に作るので簡単に書きたい。
Style/ClassAndModuleChildren:
  Enabled: false

# ドキュメントの無い public class を許可する
Style/Documentation:
  Enabled: false

# !! のイディオムは積極的に使う
Style/DoubleNegation:
  Enabled: false

# 空メソッドの場合だけ1行で書かなければいけない理由が無い
# 「セミコロンは使わない」に寄せた方がルールがシンプル
Style/EmptyMethod:
  EnforcedStyle: expanded

# まだ対応するには早い
Style/FrozenStringLiteralComment:
  Enabled: false

# rake タスクの順序の hash は rocket を許可する
Style/HashSyntax:
  Exclude:
    - "**/*.rake"
    - "Rakefile"

# 条件式の方を意識させたい場合には後置の if/unless を使わない方が分かりやすい
Style/IfUnlessModifier:
  Enabled: false

# scope 等は複数行でも lambda ではなく ->{} で揃えた方が見た目が綺麗
Style/Lambda:
  EnforcedStyle: literal

# 特に model 内において、ローカル変数とメソッド呼び出しの区別をつけた方が分かりやすい場合が多い
Style/RedundantSelf:
  Enabled: false

# 以下のような rescue はそもそも raise して良いのかチェックするべきなので、AutoCorrect しない
#   something rescue nil
Style/RescueModifier:
  AutoCorrect: false

# 無指定だと StandardError を rescue するのは常識の範疇なので。
Style/RescueStandardError:
  EnforcedStyle: implicit

# Rubocop は %w[] を押すが、%w() で問題ないとする
Style/PercentLiteralDelimiters:
  PreferredDelimiters:
    '%w': '()'
    '%W': '()'
    '%i': '()'

# 1_000_000 と区切り文字が 2 個以上必要になる場合のみ _ 区切りを必須にする
# 10_000_00 は許可しない。(これは例えば 10000 ドルをセント単位にする時に便利だが
# 頻出しないので foolproof に振る
Style/NumericLiterals:
  MinDigits: 7
  Strict: true

# foo.positive? は foo > 0 に比べて意味が曖昧になる
# foo.zero? は許可したいけどメソッドごとに指定できないので一括で disable に
Style/NumericPredicate:
  Enabled: false

# 無理して使うモンじゃない
Style/SafeNavigation:
  Enabled: false

# spec 内は見た目が綺麗になるので許可
Style/Semicolon:
  Exclude:
    - "spec/**/*"

# * 式展開したい場合に書き換えるのが面倒
# * 文章ではダブルクォートよりもシングルクォートの方が頻出する
# ことから EnforcedStyle: double_quotes 推奨
Style/StringLiterals:
  Exclude:
    - "db/migrate/*"

# AutoCorrect すると .to_s するが、実際には .to_s が必要ない場合が多いので、手動で行う
Style/RedundantInterpolation:
  AutoCorrect: false

# 条件式で arr.size > 0 が使われた時に
#   if !arr.empty?
#   else
#   end
# に修正されるのが嫌。
# 中身を入れ替えて否定外しても良いんだけど、どちらが例外的な処理なのかが分かりづらくなる。
Style/ZeroLengthPredicate:
  Enabled: false

#################### Security ##############################

# 毎回 YAML.safe_load(yaml_str, [Date, Time]) するのは面倒で。。
# YAML ファイル内で &default のようなエイリアスを(簡単に)使えなくなるので
# https://qiita.com/QUANON/items/f07004c030824d2b79fd
Security/YAMLLoad:
  Enabled: false
